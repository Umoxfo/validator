name: Linux build for vnu

on:
  push:
    branches: [ actions ]
  pull_request:
    branches: [ actions ]
  # schedule:
  #   - cron: 0 0 1 */3 *

jobs:
  linux:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        # java: [8, 11, 13, 14, 15-ea]
        java: [11]
    services:
      jetty:
        image: jetty:9-jre11-slim
        ports:
          - 8080:8080
        volumes:
          - ~/build/dist-war:/var/lib/jetty/webapps
      # tomcat:
      #   image: tomcat:9-jdk11-openjdk-slim
      #   ports:
      #     - 8888:8080
      #   volumes:
      #     - ~/build/dist-war:/usr/local/tomcat/webapps

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        repository: validator/validator
        submodules: recursive
    - name: Setup Java JDK
      uses: actions/setup-java@v1
      with:
        java-version: ${{ matrix.java }}
    - name: Setup Python
      uses: actions/setup-python@v1
      with:
        python-version: '3.x'
    - name: Cache dependencies
      uses: actions/cache@v1
      with:
        path: ./dependencies
        key: build-dependencies-${{ hashFiles('build/build.py') }}
        restore-keys: build-dependencies-
    - name: Cache extras
      uses: actions/cache@v1
      with:
        path: ./extras
        key: build-extras-${{ hashFiles('build/build.py') }}
        restore-keys: build-extras-
    - name: Install Dependencies
      run: python ./checker.py dldeps
    - name: List of dependencies
      run: |
        ls ./dependencies
        ls ./extras
    - name: Build
      run: python ./checker.py build

    - name: Create Jar package
      run: python ./checker.py jar
    - name: Create War package
      run: python ./checker.py war
    - name: Create a binary runtime image package
      run: python ./checker.py image

    - name: Test Jar package
      run: |
        jar xf ./build/dist/vnu.jar && file nu/validator/client/SimpleCommandLineValidator.class | grep "version 52.0"
        java -jar ./build/dist/vnu.jar ./build/dist/index.html
        java -jar ./build/dist/vnu.jar ./site/nu-about.html

    - name: Test War package
      run: |
        jar xf ./build/dist-war/vnu.war && file WEB-INF/classes/nu/validator/servlet/VerifierServlet.class | grep "version 52.0"
        sleep 0.625
        curl -sS 'http://localhost:8080/vnu/?out=gnu&doc=data:text/html;charset=utf-8,%3C%21doctype%20html%3E%3Cmeta%20charset%3Dutf-8%3E%3Ctitle%3ETest%3C%2Ftitle%3E' > RESULTS
        test -z "$(if [ -t RESULTS ]; then cat RESULTS | grep -v '^$'; fi)"
        if [ $? != 0 ]; then cat RESULTS; fi

    - name: Test suites
      run: |
        python ./checker.py check
        python ./checker.py test

    - if: matrix.java == 11 && success()
      run: |
        gpg --import <(echo "${{ secrets.GPG_GITHUB_ACTIONS }}") || true
        for file in build/dist/vnu.{jar,linux}* build/dist-war/vnu.war*; do gpg --yes -ab -u 0xFB107FB740AAC813 -s $file; done || true

        mkdir -p ./build/dist-jar
        mv ./build/dist/vnu.jar* ./build/dist-jar
        mkdir -p ./build/dist-image
        mv ./build/dist/vnu.linux* ./build/dist-image
    # It will be changed in the future.
    # - name: Before Deploy
    #   if: matrix.java == 11 && success()
    #   run: |
    #     gpg --import <(echo "${{ secrets.GPG_GITHUB_ACTIONS }}") || true
    #     git config --local user.name "GitHub Actions"
    #     git config --local user.email "mike@w3.org"
    #     git remote set-url origin https://Umoxfo:${{secrets.GITHUB_TOKEN}}@github.com/${{github.repository}}.git
    #     for tag in jar war linux
    #     do
    #       git push --delete origin ${tag} || true
    #       git tag -m "${{ github.event.head_commit.message }}" -f ${tag} -s --local-user=0xFB107FB740AAC813
    #       git push origin ${tag} || true
    #     done

    - name: Upload Jar artifact
      if: matrix.java == 11 && success()
      uses: actions/upload-artifact@v1
      with:
        name: dist-jar
        path: build/dist-jar

    - name: Upload War artifact
      if: matrix.java == 11 && success()
      uses: actions/upload-artifact@v1
      with:
        name: dist-war
        path: build/dist-war

    - name: Upload runtime image artifact
      if: matrix.java == 11 && success()
      uses: actions/upload-artifact@v1
      with:
        name: dist-image
        path: build/dist-image

  before_deploy:
    needs: linux
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        ref: actions

    - name: Before Deploy
      run: |
        gpg --import <(echo "${{ secrets.GPG_GITHUB_ACTIONS }}") || true
        git config --local user.name "GitHub Actions"
        git config --local user.email "mike@w3.org"
        git remote set-url origin https://${{github.repository.owner.login}}:${{secrets.GITHUB_TOKEN}}@github.com/${{github.repository}}.git
        for tag in jar war linux; do git tag -m "${{ github.event.head_commit.message }}" -f ${tag} -s -u 0xFB107FB740AAC813; done
        git push origin --tags --force

  jar:
    needs: before_deploy
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        ref: actions

    - name: Download Jar artifact
      uses: actions/download-artifact@v1
      with:
        name: dist-jar
        path: build/dist-jar

    - name: Update the Jar Release
      uses: ./.github/actions/upload-release-asset
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        tag_name: jar
        prerelease: true
        file: ./build/dist-jar/*
        overwrite: true

  war:
    needs: before_deploy
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        ref: actions

    - name: Download War artifact
      uses: actions/download-artifact@v1
      with:
        name: dist-war
        path: build/dist-war

    - name: Update the War Release
      uses: ./.github/actions/upload-release-asset
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        tag_name: war
        prerelease: true
        file: ./build/dist-war/vnu.war*
        overwrite: true

  image:
    needs: before_deploy
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        ref: actions

    - name: Download runtime image artifact
      uses: actions/download-artifact@v1
      with:
        name: dist-image
        path: build/dist-image

    - name: Update the image Release
      uses: ./.github/actions/upload-release-asset
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        tag_name: linux
        prerelease: true
        file: ./build/dist-image/*
        overwrite: true

  docker:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        ref: actions
    - run: |
        cat Dockerfile-alpine | docker build -t validator -f- https://github.com/validator/validator.git
        docker tag validator umoxfo/validator:$(date -u +"%y.%-m.%-d")
        # docker push umoxfo/validator:$(date -u +"%y.%-m.%-d")

  # npm:
  #   needs: linux
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v2
  #   - name: Download Jar artifact
  #     uses: actions/download-artifact@v1
  #     with:
  #       name: dist-jar
  #       path: build/dist
  #   - uses: actions/setup-node@v1
  #     with:
  #       node-version: '12.x'
  #   - run: |
  #       gpg --import <(echo "${{ secrets.GPG_GITHUB_ACTIONS }}") || true
  #       git config --local user.name "GitHub Actions"
  #       git config --local user.email "mike@w3.org"
  #       git remote set-url origin https://${{github.repository.owner.login}}:${{secrets.GITHUB_TOKEN}}@github.com/${{github.repository}}.git
  #       git tag -s -f $(date -u +"%y.%-m.%-d")
  #   - run: npm install
  #   - run: npm publish
  #     env:
  #       NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
