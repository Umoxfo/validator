CommonMessage.Error.FileNotFound=File not found.
CommonMessage.Error.ExtensionError=File was not checked. Files must have .html, .xhtml, .htm, or .xht extensions.

EmbeddedValidator.SetOutputFormat.IllegalArgumentException=outputFormat can not be null
EmbeddedValidator.SetSchemaUrl.IllegalArgumentException=schemaUrl should be a URL

EmbeddedValidator.OneOffValidator.Message.Success=Document checking completed. No errors found.
EmbeddedValidator.OneOffValidator.Message.Fail=Document checking completed.

EmbeddedValidator.OneOffValidator.NewEmitter.UnsupportedOperationException=OutputFormat %s not supported
EmbeddedValidator.OneOffValidator.Validate.IllegalStateException=OneOffValidator instances are not reusable

HttpClient.Message.WaitingForDocumentInput=Waiting for document content on standard input...
HttpClient.Message.ErrorValidatorServiceConnection=\nerror: Expected to find validator service at %s but could not connect. Stopping.\n

SimpleCommandLineValidator.CLI.Error.FileNotFound=error: File not found: 
SimpleCommandLineValidator.CLI.Error.Version=[unknown version]
SimpleCommandLineValidator.CLI.Error.Schema=error: The "--schema" option requires a URL for a schema.
SimpleCommandLineValidator.CLI.Error.OutputFormat=Error: Unsupported output format "%s". Must be "gnu", "xml", "json", or "text".\n
SimpleCommandLineValidator.CLI.Error.NoDocument=\nError: No documents specified.\n

SimpleCommandLineValidator.SetSchema.Message.Terminating=\ Terminating.
SimpleCommandLineValidator.SetSchema.StackOverflowError=StackOverflowError while evaluating HTML schema.\n\
The checker requires a java thread stack size of at least 512k.\n\
Consider invoking java with the -Xss option. For example:\n\
\  java -Xss512k -jar ~/vnu.jar FILE.html

SimpleCommandLineValidator.End.SuccessMsg=Document checking completed. No errors found.
SimpleCommandLineValidator.End.FailureMsg=Document checking completed.

SimpleCommandLineValidator.Error.SAXException="%s":-1:-1: warning: %s\n

SimpleCommandLineValidator.SetErrorHandler.RuntimeException=Bug. Should be unreachable.

SimpleCommandLineValidator.Usage.Msg=Usage:\n\
\n\
\    vnu-runtime-image/bin/vnu OPTIONS FILES (Linux or macOS)\n\
\    vnu-runtime-image\\bin\\vnu.bat OPTIONS FILES (Windows)\n\
\    java -jar ~/vnu.jar OPTIONS FILES (any system with Java8+ installed)\n\
\n\
...where FILES are the documents to check, and OPTIONS are zero or more of:\n\
\n\
\    --errors-only --Werror --exit-zero-always --asciiquotes\n\
\    --user-agent\u00A0USER_AGENT --no-langdetect --no-stream --filterfile\u00A0FILENAME\n\
\    --filterpattern\u00A0PATTERN --css --skip-non-css --also-check-css --svg\n\
\    --skip-non-svg --also-check-svg --html --skip-non-html\n\
\    --format\u00A0gnu|xml|json|text --help --verbose --version\n\
\n\
For detailed usage information, try the "--help" option or see:\n\
\n\
\  http://validator.github.io/\n\
\n\
To read from stdin, use "-" as the filename, like this: "java -jar vnu.jar - ".\n\
To run the checker as a standalone Web-based service, open a new terminal\n\
window and invoke the checker like this\n\
\n\
\    java -cp vnu.jar nu.validator.servlet.Main 8888\n\
\    vnu-runtime-image/bin/java nu.validator.servlet.Main 8888\n\
\    vnu-runtime-image\\bin\\java -cp vnu.jar nu.validator.servlet.Main 8888\n\
\n\
...then open http://127.0.0.1:8888 in a browser.\n\
\n\
After that, to check documents locally using the packaged HTTP client, do this:\n\
\n\
\    java -cp vnu.jar nu.validator.client.HttpClient FILES\n\
\    vnu-runtime-image/bin/java nu.validator.client.HttpClient FILES\n\
\    vnu-runtime-image\\bin\\java nu.validator.client.HttpClient FILES\n\
\n\

TestRunner.Warn.FileIgnored="%s": warning: File ignored.\n
TestRunner.Failure=Failure\!
TestRunner.Success=Success\!
TestRunner.Errror.NoOption=\nError: There is no option "%s".\n
TestRunner.Warning.NoExpectedMessage="%s": warning: No expected message in messages file.\n
TestRunner.Error.NotExpected="%s": error: Expected "%s" but instead encountered "%s".\n
TestRunner.Error.NotError="%s": error: Expected an error but did not encounter any.\n
TestRunner.Warn.NoExpectedMessage="%s": warning: No expected message in messages file.\n
TestRunner.Error.ExpWarn.ErrorFirst="%s": error: Expected a warning but encountered an error first.\n
TestRunner.Warn.FileNotFound="%s": warning: File not found.\n
TestRunner.Error.ExpWarn.NoEncounter="%s": error: Expected a warning but did not encounter any.\n
TestRunner.Error.ExpWarnOnly.LeastOneError="%s": error: Expected a warning only but encountered at least one error.\n
TestRunner.Warn.NoFileFoundInDir="%s": warning: No files found in directory.\n
TestRunner.Warn.FileNotChecked="%s": warning: File was not checked. Files must have a .html, .xhtml, .htm, or .xht extension.\n
TestRunner.Error.OutputFormatJson=\nError: Expected the name of a messages file with a .json extension.
TestRunner.Error.FileNotFound=\nError: "%s" file not found.\n
TestRunner.Error.NotFile=\nError: "%s" is not a file.\n
TestRunner.Usage=\nUsage:\n\
\n\
\    java nu.validator.client.TestRunner [--errors-only] [--write-messages]\n\
\          [--verbose] [MESSAGES.json]\n\
\n\
...where the MESSAGES.json file contains name/value pairs in which the name is\n\
a pathname of a document to check and the value is the first error message or\n\
warning message the validator is expected to report when checking that document.\n\
Use the --write-messages option to create the file.