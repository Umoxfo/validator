import java.text.SimpleDateFormat

plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'

    id 'com.intershop.gradle.javacc' version '3.0.3'
}

allprojects {
    apply plugin: 'java-library'
    apply plugin: 'eclipse'
    apply plugin: 'idea'

    repositories {
        flatDir { dirs file('jing-trang/lib') }
        jcenter()
    }

    project.sourceCompatibility = '1.8'
    project.targetCompatibility = '1.8'

    ext {
        dependencyVersions = [
            icu4j: '58.2',
            salvation: '2.6.0',
            'commons-fileupload': '1.3.1',
            log4j: '1.2.17',
            log4j2: '2.12.0',
            httpclient: '4.4.1',
            jetty: '9.4.19.v20190610',

            // Dependencies of subproject jint-trang
            saxon: '9.1.0.8',
            xalan: '2.7.2',
            isorelax: '20041111',
            isorelaxLib: "${project(':jing-trang').projectDir}/lib/isorelax.jar",

            // Dependencies of the rng-parse module
            javacc: '7.0.4',

            // Dependencies of subproject htmlparser
            jchardet: '1.0'
        ]

        projectVersions = [
            validator: new SimpleDateFormat('yy.M.d').format(Calendar.getInstance().getTime()),
            jing: '20190429VNU',
            htmlparser: '1.4.13',
            cssvalidator: '1.0.5',
            galimatias: '0.1.3',
            langdetect: '1.2'
        ]

        repositoryURL = [
            snapshots: 'https://oss.sonatype.org/content/repositories/snapshots/',
            staging: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
        ]
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'

        options.debug 'debugLevel': 'source,lines,vars'
        options.warnings = false
    }
}

subprojects {
    apply plugin: 'java-library'

    sourceSets.main.java.srcDir 'src'

    tasks.withType(JavaCompile) {
//        options.deprecation = true
//        options.compilerArgs = ['-Xlint:unchecked']
    }

    tasks.withType(Jar) {
        from project.sourceSets.main.output

        duplicatesStrategy = 'exclude'
    }
}

project(':') {
    apply plugin: 'java'
    apply plugin: 'war'

    dependencies {
        implementation "com.ibm.icu:icu4j:${dependencyVersions.icu4j}"
        implementation "com.shapesecurity:salvation:${dependencyVersions.salvation}"
        implementation "commons-fileupload:commons-fileupload:${dependencyVersions.'commons-fileupload'}"
        implementation "log4j:log4j:${dependencyVersions.log4j}"
        implementation "org.apache.httpcomponents:httpclient:${dependencyVersions.httpclient}"
        providedCompile "org.eclipse.jetty.http2:http2-server:${dependencyVersions.jetty}"
        providedCompile "org.eclipse.jetty:jetty-servlet:${dependencyVersions.jetty}"
//    implementation "org.eclipse.jetty:jetty-servlets:${dependencyVersions.jetty}"

        implementation project(':css-validator'),
//                       'com.thaiopensource:jing:+', // jing-trang project
                       project(':jing-trang:jing'),
                       project(':langdetect'),
                       project(':galimatias'),
                       project(':htmlparser')

        testImplementation "org.eclipse.jetty:jetty-util-ajax:${dependencyVersions.jetty}"
        // Use JUnit Jupiter API for testing.
//    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.4.2'

        // Use JUnit Jupiter Engine for testing.
//    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.4.2'
    }

    def distDir = "${buildDir}/dist"

    sourceSets {
        main {
            java {
                srcDir 'src'
                exclude '**/nu/validator/xml/SaxCompiler.java'
            }
            resources {
                srcDir 'resources'
                include 'nu/'
            }

            compileClasspath += project(':jing-trang:jing').configurations.compileClasspath
        }

        test {
            java.srcDir 'test/java'
        }
    }

    webAppDirName = 'webapp'

    wrapper.gradleVersion '5.5.1'

    /* For Jar archive */
    tasks.withType(Jar) {
        archiveBaseName = 'vnu'

        manifest {
            attributes 'Main-Class': 'nu.validator.client.SimpleCommandLineValidator',
                       'Implementation-Title': 'The Nu Markup Checker (v.Nu)',
                       'Implementation-Version': "${projectVersions.validator}",
                       'Implementation-Vendor': 'http://validator.github.io/validator/'
        }

        metaInf {
            from 'src/META-INF/services'
            into 'services'
        }

        duplicatesStrategy = 'exclude'

        destinationDirectory.set file(distDir)
    }

    task list(dependsOn: configurations.compileClasspath) {
        doLast {
            println sourceSets.main.output.join('\n')
            println ''
            // println project(':jing-trang:jing').dependentProjects.collect { it.sourceSets.main.output.resourcesDir }.join('\n')
            println ''
//            println sourceSets.main.compileClasspath.join('\n')
            println ''
//            println configurations.runtimeClasspath.join('\n')
            println ''
            def a = (configurations.runtimeClasspath.asFileTree - configurations.compileClasspath.asFileTree)
            println a.join('\n')

            println compileJava.options.encoding
        }
    }

    task copyLib(type: Sync) {
        from configurations.runtimeClasspath
        into "${distDir}/image/lib"
    }

    task createJar(type: Jar, dependsOn: copyLib) {
        afterEvaluate {
            manifest {
                attributes 'Class-Path': configurations.runtimeClasspath.collect { "lib/${it.name}" }.join(' ')
            }
        }

        from sourceSets.main.output

        destinationDirectory.set file("${distDir}/image")
    }

    task fatJar(type: Jar) {
        // Copy dependencies into the jar archive
        afterEvaluate {
            from(configurations.runtimeClasspath.collect { it.file ? zipTree(it) : it }) {
                exclude 'META-INF/maven', 'META-INF/services'
            }
        }

        from sourceSets.main.output
    }

    /* For War archive */
    tasks.withType(War) {
        archiveBaseName = 'vnu'

        metaInf {
            from 'src/META-INF/services'
            into 'services'
        }

        webXml = file("webapp/WEB-INF/web.xml")

        classpath sourceSets.main.output,
                  project(':langdetect').sourceSets.main.output,
                  project(':galimatias').sourceSets.main.output,
                  project(':htmlparser').sourceSets.main.output

        destinationDirectory.set file("${distDir}/war")
    }
}

project(':css-validator') {
    description 'W3C CSS Validator'

    sourceCompatibility = '1.7'
    targetCompatibility = '1.7'

    sourceSets.main {
        java {
//            srcDirs = ['.']
//            include 'org/w3c/**'

            srcDirs = ['src/main/java']
        }
        resources {
//            srcDirs = ['.']
            srcDir 'src/main/java'
        }
    }

    tasks.withType(Jar) {
        manifest {
            attributes 'Main-Class': 'org.w3c.css.css.CssValidator'
        }

        from sourceSets.main.output
    }
}

project(':jing-trang') {
    apply from: "${rootProject.rootDir}/buildScript/jing-trang/build.gradle"
}

project(':langdetect') {
    description = 'Fork of the com.cybozu.labs.langdetect language-detection library'

    dependencies {
        implementation "org.eclipse.jetty:jetty-util-ajax:${dependencyVersions.jetty}"
    }

    sourceSets.main.resources.srcDir 'src'
}

project(':galimatias') {
    description 'A library for URL parsing, canonicalization and manipulation.'

    dependencies {
        implementation "com.ibm.icu:icu4j:${dependencyVersions.icu4j}"
    }

    sourceSets.main.java.srcDirs = ['src/main/java']
}

project(':htmlparser') {
    description 'An implementation of the HTML5 parsing algorithm in Java for applications.'

    dependencies {
        implementation "com.ibm.icu:icu4j:${dependencyVersions.icu4j}"
        implementation "net.sourceforge.jchardet:jchardet:${dependencyVersions.jchardet}"
    }
}

/* Functions for building schema drivers */
def SchemaDriverConfig = new ConfigSlurper().parse(file('buildScript/conf/SchemaDrivers.gradle').toURI().toURL()).SchemaDrivers

def schemaDrivers = [
    /* HTML schema drivers */
    HtmlCore              : [
        sourceName: '',
        driverName: 'html5core.rnc',
        driver    :
            SchemaDriverConfig.SchemaDriverToggle_HtmlCore
                + SchemaDriverConfig.SchemaDriverBase
                + SchemaDriverConfig.SchemaDriverMeta
    ],
    Html5NoMicrodata      : [
        sourceName: '',
        driverName: 'html5full-no-microdata.rnc',
        driver    :
            SchemaDriverConfig.SchemaDriverNamespace
                + SchemaDriverConfig.SchemaDriverToggle_Html5
                + SchemaDriverConfig.SchemaDriverBase
                + SchemaDriverConfig.SchemaDriverHtml5NoMicrodata
                + 'include "its20-html5.rnc"\n'
                + 'common.attrs &= its-html-attributes\n'
    ],
    Html5                 : [
        sourceName: 'html5full-no-microdata.rnc',
        driverName: 'html5full.rnc',
        driver    : SchemaDriverConfig.SchemaDriverHtml5Microdata
    ],
    Html5RDFa             : [
        sourceName: 'html5full.rnc',
        driverName: 'html5full-rdfa.rnc',
        driver    : SchemaDriverConfig.SchemaDriverHtml5RDFa
    ],
    Html5RDFaLite         : [
        sourceName: 'html5full.rnc',
        driverName: 'html5full-rdfalite.rnc',
        driver    : SchemaDriverConfig.SchemaDriverHtml5RDFaLite
    ],

    /* XHTML schema drivers */
    XhtmlCore             : [
        sourceName: '',
        driverName: 'xhtml5core.rnc',
        driver    :
            SchemaDriverConfig.SchemaDriverNamespace
                + SchemaDriverConfig.SchemaDriverToggle_XhtmlCore
                + SchemaDriverConfig.SchemaDriverBase
                + SchemaDriverConfig.SchemaDriverMeta
    ],
    XhtmlCorePlusWf2      : [
        sourceName: 'xhtml5core.rnc',
        driverName: 'xhtml5core-plus-web-forms2.rnc',
        driver    : SchemaDriverConfig.SchemaDriverPlusWebForms2
    ],
    Xhtml5htmlNoMicrodata : [
        sourceName: '',
        driverName: 'xhtml5full-html-no-microdata.rnc',
        driver    :
            SchemaDriverConfig.SchemaDriverNamespace
                + SchemaDriverConfig.SchemaDriverToggle_Xhtml5html
                + SchemaDriverConfig.SchemaDriverBase
                + SchemaDriverConfig.SchemaDriverHtml5NoMicrodata
    ],
    Xhtml5xhtmlNoMicrodata: [
        sourceName: '',
        driverName: 'xhtml5full-xhtml-no-microdata.rnc',
        driver    :
            SchemaDriverConfig.SchemaDriverNamespace
                + SchemaDriverConfig.SchemaDriverToggle_Xhtml5xhtml
                + SchemaDriverConfig.SchemaDriverBase
                + SchemaDriverConfig.SchemaDriverHtml5NoMicrodata
    ],
    Xhtml5xhtml           : [
        sourceName: 'xhtml5full-xhtml-no-microdata.rnc',
        driverName: 'xhtml5full-xhtml.rnc',
        driver    : SchemaDriverConfig.SchemaDriverHtml5Microdata
    ],
    Xhtml5xhtmlRDFa       : [
        sourceName: 'xhtml5full-xhtml.rnc',
        driverName: 'xhtml5full-xhtml-rdfa.rnc',
        driver    : SchemaDriverConfig.SchemaDriverHtml5RDFa
    ],
    Xhtml5xhtmlRDFaLite   : [
        sourceName: 'xhtml5full-xhtml.rnc',
        driverName: 'xhtml5full-xhtml-rdfalite.rnc',
        driver    : SchemaDriverConfig.SchemaDriverHtml5RDFaLite
    ],
    Xhtml5html            : [
        sourceName: 'xhtml5full-html-no-microdata.rnc',
        driverName: 'xhtml5full-html.rnc',
        driver    : SchemaDriverConfig.SchemaDriverHtml5Microdata
    ],
    Xhtml5htmlRDFa        : [
        sourceName: 'xhtml5full-html.rnc',
        driverName: 'xhtml5full-html-rdfa.rnc',
        driver    : SchemaDriverConfig.SchemaDriverHtml5RDFa
    ],
    Xhtml5htmlRDFaLite    : [
        sourceName: 'xhtml5full-html.rnc',
        driverName: 'xhtml5full-html-rdfalite.rnc',
        driver    : SchemaDriverConfig.SchemaDriverHtml5RDFaLite
    ]
]

File openDriver(schemaDir, driverName, sourceName = '') {
    def driverPath = "${schemaDir}/${driverName}"
    delete driverPath

    // if we have a file sourceName, copy it so that we can later
    // just append additions to the copy
    if (sourceName != '') {
        copy {
            from("${schemaDir}/${sourceName}") {
                rename { filename -> driverName }
            }
            into schemaDir
        }
    }

    return file(driverPath)
}
/* end of data and functions for building schema drivers */

def localEntityFileDir = "${rootProject.sourceSets.main.output.resourcesDir}/nu/validator/localentities/files"

// No1
task updateSubmodules(type: Exec) {
    commandLine 'git', 'submodule', 'update', '--remote', '--merge', '--init'

//    exec {
//        commandLine 'git', '--version'
//    }
}

// No2
task downloadLocalEntities {
    doLast {
        delete 'local-entities'

        file("${localEntityFileDir}/html5spec") << new URL('https://html.spec.whatwg.org/').openStream()
    }
}

// No7
task buildSchemaDrivers {
    def html5Dir = 'schema/html5'
    ['HtmlCore', 'Html5NoMicrodata', 'Html5', 'Html5RDFa', 'Html5RDFaLite',
     'XhtmlCore', 'XhtmlCorePlusWf2', 'Xhtml5htmlNoMicrodata',
     'Xhtml5xhtmlNoMicrodata', 'Xhtml5html', 'Xhtml5xhtml', 'Xhtml5xhtmlRDFa',
     'Xhtml5htmlRDFaLite', 'Xhtml5xhtmlRDFaLite'].each {
        def driverName = schemaDrivers[it].driverName
        def sourceName = schemaDrivers[it].sourceName
        def driver = schemaDrivers[it].driver

        openDriver(html5Dir, driverName, sourceName)
            .withWriterAppend('UTF-8') { writer -> writer << driver }
    }

    def driversDir = 'schema/.drivers'
    copy {
        def drivers = SchemaDriverConfig.CoreSchemaDriverFiles + 'xhtml10'

        doLast {
            println drivers.collect { fileName ->
                "Copying ${driversDir}/${fileName} to schema/${fileName}"
            }.join('\n')
        }

        from(driversDir) {
            include SchemaDriverConfig.CoreSchemaDriverFiles
            include 'xhtml10/'
        }
        into 'schema'
    }

    copy {
        doLast {
            println "Copying ${driversDir}/rdf.rnc to schema/rdf/rdf.rnc"
        }

        from file("${driversDir}/rdf.rnc")
        into 'schema/rdf'
    }

    copy {
        from files("${driversDir}/legacy.rnc", "its2/its20-html5.rnc", "its2/its20-html5-types.rnc")
        into html5Dir
    }
}

task preparePropertiesFile(type: Copy) {
    group = 'prepareLocalEntityJar'

    from 'resources/misc.properties'
    into localEntityFileDir
    expand([
        version: projectVersions.validator
    ])
}

task copyLocalEntities(type: Sync) {
    group = 'prepareLocalEntityJar'

    from('README.md') {
        rename { fileName -> 'cli-help' }
    }
    from('site') {
        include('about.html', 'style.css', 'script.js', 'icon.png')
    }
    from('docs/Microsyntax-descriptions.md') {
        rename { fileName -> 'syntax-descriptions' }
    }
    from('resources') {
        include('existing-rel-values')
    }
    into file(localEntityFileDir)
}

task updateEntitymap {
    group = 'prepareLocalEntityJar'

    mustRunAfter preparePropertiesFile

    doLast {
        def outFile = file("${localEntityFileDir}/entitymap")

        delete outFile
        file('resources/entity-map.txt').eachLine('UTF-8') {
            def values = it.strip().split('\t')   // [url, path]

            def path = values[1]
            def entPath = path.startsWith('schema/') ? path : ''

            if (new File(entPath).exists()) {
                def safeName = path.replaceAll(/[^a-zA-Z0-9]/, '_')
                def safePath = "${localEntityFileDir}/${safeName}"

                outFile.append("${values[0]}\t${safePath}\n", 'UTF-8')
                new File(safePath) << new File(entPath)
            }
        }
    }
}

task deleteSchema(type: Delete) {
    group = 'prepareLocalEntityJar'

    mustRunAfter updateEntitymap

    delete fileTree(dir: 'schema', includes: SchemaDriverConfig.CoreSchemaDriverFiles),
           fileTree(dir: 'schema/html5', includes: SchemaDriverConfig.HtmlSchemaDriverFiles),
           'schema/xhtml10', 'schema/rdf'
}

// No9
task prepareLocalEntityJar {
    mustRunAfter buildSchemaDrivers
    dependsOn preparePropertiesFile, copyLocalEntities, updateEntitymap, deleteSchema
}

def vnuSrc = 'src/nu/validator'
task compileSaxCompiler(type: JavaCompile) {
    source "${vnuSrc}/xml/SaxCompiler.java"
    classpath = files(buildDir)
    destinationDir = file("${buildDir}/emitter")
}

// No13
task buildEmitters(dependsOn: compileSaxCompiler) {
    doLast {
        ['PageEmitter', 'FormEmitter'].each { emitter ->
            javaexec {
                classpath = files("${buildDir}/emitter")
                main = 'nu.validator.xml.SaxCompiler'
                args "site/${emitter}.xml", "${vnuSrc}/servlet/${emitter}.java"
            }
        }

        delete file("${buildDir}/emitter")
    }
}

enum ArtifectID {
    JING, HTMLPARSER, CSS_VALIDATOR, GALIMATIAS, LANGDETECT
}

class Release {


    // No16
    void reInitDistDir(self, localDestDir) {
        delete localDestDir
        file(localDestDir).mkdirs()
    }

    // No17
    void setVersion(self, localDistDir, url = null) {
        switch (self.artifactId) {
            case ArtifectID.JING:
                self.version = subprojectVersions.jing; break
            case ArtifectID.HTMLPARSER:
                self.version = subprojectVersions.htmlparser; break
            case ArtifectID.CSS_VALIDATOR:
                self.version = subprojectVersions.cssvalidator; break
            case ArtifectID.GALIMATIAS:
                self.version = subprojectVersions.galimatias; break
            case ArtifectID.LANGDETECT:
                self.version = subprojectVersions.langdetect; break
            default:
                if(url == repositoryURL.snapshots) {
                    self.version += '-SNAPSHOT'
                }
                break
        }

        self.writeVersion(localDistDir)
    }

    // No18
    void writeVersion(self, localDistDir) {
        file("${localDistDir}/VERSION").write(self.version, 'UTF-8')
    }

    def distWarDir = 'build/dist-war'
    // No 15
    void createJarOrWar(/*self, */archiveType) {
        def localDistDir = project.distDir

        def archiveDist = 'dist'
        if (archiveType == 'war') {
            archiveDist = 'dest-war'
            localDistDir = destWarDir
            file("${localDistDir}/war").mkdirs()
        }
        self.reInitDistDir(localDistDir)
        self.setVersion(localDistDir)

        // Set the destination directory of the archive
        project.distDir = "build/${archiveDist}"

    }

    // No12
    void buildValidator(self) {
        // No13
        buildEmitters

        // No14
        tasks[':compileJava']

        // No15
        self.createJarOrWar('jar')
    }

// No4
    void buildAll(self) {
        // No5
        // buildCssValidator
        tasks[':css-validator:classes']

        // No6
        // buildJing
        tasks[':jing-trang:jing:classes']

        // No7
        buildSchemaDrivers

        // No8
        prepareLocalEntityJar

        // No9
        // buildLangdetect
        tasks[':langdetect:classes']

        // No10
        // buildGalimatias
        tasks[':galimatias:classes']

        // No11
        // buildHtmlParser
        tasks[':htmlparser:classes']

        // No12
        buildValidator(self)
    }
}

task methodTest {
//    dependsOn 'copyCoreSchemaDrivers', 'copyRDF'

//    dependsOn project(':jing-trang:jing').jar

}

test {
    // Use junit platform for unit tests
    useJUnitPlatform()
}
