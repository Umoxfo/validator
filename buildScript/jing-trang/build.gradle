import javax.xml.transform.TransformerFactory
import javax.xml.transform.stream.StreamResult
import javax.xml.transform.stream.StreamSource

subprojects {
    ext.dependentProjects = []

    buildDir = "${project(':jing-trang').projectDir}/build/mod/${project.name}"

    sourceSets.main {
        java.srcDirs = ['src/main']

        resources.srcDir 'src/resources'
    }

    tasks.withType(Jar) {
        afterEvaluate {
            from project.dependentProjects.collect { it.sourceSets.main.output.files }.flatten()
            from project.sourceSets.main.output

            duplicatesStrategy = 'exclude'
        }
    }
}

configure(allprojects.findAll { it.name != 'jing'}) {
    project.tasks.withType(Jar) { enabled = false }
}

project(':jing-trang') {
    description 'Schema validation and conversion based on RELAX NG'
}

project(':jing-trang:jing') {
    dependentProjects = [project(':jing-trang:util'),
                         project(':jing-trang:regex'),
                         project(':jing-trang:datatype'),
                         project(':jing-trang:xsd-datatype'),
                         project(':jing-trang:validate'),
                         project(':jing-trang:rng-parse'),
                         project(':jing-trang:rng-validate'),
                         project(':jing-trang:nvdl'),
                         project(':jing-trang:schematron'),
                         project(':jing-trang:picl')]

    dependencies {
        implementation dependentProjects
    }

    tasks.withType(Jar) {
        manifest {
            attributes 'Main-Class': 'com.thaiopensource.relaxng.util.Driver'
            attributes 'Class-Path': 'saxon9.jar isorelax.jar'
        }

        destinationDirectory.set file("${parent.buildDir}/${libsDirName}")
    }
}

project(':jing-trang:datatype') {
    dependentProjects = [project(':jing-trang:util')]

    dependencies {
        implementation dependentProjects
    }
}

project(':jing-trang:nvdl') {
    dependentProjects = [project(':jing-trang:util'),
                         project(':jing-trang:validate'),
                         project(':jing-trang:rng-validate')]

    dependencies {
        implementation dependentProjects
    }
}

project(':jing-trang:picl') {
    dependentProjects = [project(':jing-trang:util'),
                         project(':jing-trang:validate'),
                         project(':jing-trang:rng-validate')]

    dependencies {
        implementation dependentProjects
    }
}

project(':jing-trang:regex') {
    dependentProjects = [project(':jing-trang:util')]

    dependencies {
        implementation dependentProjects
    }

    final def genSrcDir = "${buildDir}/generated/sources/javacc/main/java"

    ext.generateSource = { genClassName, generatedSourceName, resources = '' ->
        def regexGenClasspath = project(':jing-trang:regex-gen').sourceSets.main.output.classesDirs
        def utilClasspath = project(':jing-trang:util').sourceSets.main.output.classesDirs

        javaexec {
            classpath regexGenClasspath, utilClasspath
            main = "com.thaiopensource.datatype.xsd.regex.java.gen.${genClassName}"
            args "com.thaiopensource.datatype.xsd.regex.java.${generatedSourceName}",
                 genSrcDir, resources
        }
    }

    final def packageDir = "${genSrcDir}/com/thaiopensource/datatype/xsd/regex/java"

    task 'regex.checkGen'(dependsOn: ':jing-trang:regex-gen:compileJava') {
        doLast {
            def targetFile = "${packageDir}/Categories.java"

            ant.uptodate(property: 'regex.gen-ok', targetfile: targetFile) {
                srcfiles(dir: project(':jing-trang:regex-gen').sourceSets.main.output.classesDirs.first(),
                         includes: '**/*.class')
            }

            tasks['regex.gen'].onlyIf { ant.properties['regex.gen-ok'] == null }
        }
    }

    task 'regex.gen'(dependsOn: 'regex.checkGen') {
        doLast {
            file(packageDir).mkdirs()

            generateSource('NamingExceptionsGen', 'NamingExceptions')

            generateSource('CategoriesGen', 'Categories',
                           "${parent.projectDir}/lib/UnicodeData-3.1.0.txt")
        }
    }

    tasks.withType(JavaCompile) {
        dependsOn 'regex.gen'

        source genSrcDir
    }

    tasks.withType(Jar) {
        metaInf {
            from sourceSets.main.output.resourcesDir
        }
    }
}

project(':jing-trang:regex-gen') {
    dependentProjects = [project(':jing-trang:util')]

    dependencies {
        implementation dependentProjects
    }
}

project(':jing-trang:rng-parse') {
    apply plugin: 'com.intershop.gradle.javacc'

    dependentProjects = [project(':jing-trang:util'),
                         project(':jing-trang:datatype')]

    dependencies {
        implementation dependentProjects
    }

    final def genSrcDir = "${buildDir}/generated/sources/javacc/main/java"
    sourceSets.main.java.srcDir genSrcDir

    task 'rng-parse.gen' {
        def packageDir = "${genSrcDir}/com/thaiopensource/relaxng/parse/compact"
        file(packageDir).mkdirs()

        javacc {
            javaCCVersion = '7.0.4'
            configs {
                compactSyntax {
                    // For future migration to directory structure of "src/main/java"
                    inputFile = files(sourceSets.main.java.srcDirs).asFileTree.find { it.name == 'CompactSyntax.jj' }
                    outputDir = file(genSrcDir)
                    packageName = 'com.thaiopensource.relaxng.parse.compact'
                }
            }
        }

        doLast {
            delete "${packageDir}/JavaCharStream.java"

            def file = file("${packageDir}/CompactSyntaxTokenManager.java")
            file.write(file.text.replaceAll('java.io.IOException', 'EOFException'), 'UTF-8')
        }
    }

    tasks.withType(JavaCompile) {
        dependsOn 'rng-parse.gen'
    }
}

project(':jing-trang:rng-validate') {
    dependentProjects = [project(':jing-trang:util'),
                         project(':jing-trang:datatype'),
                         project(':jing-trang:validate'),
                         project(':jing-trang:rng-parse')]

    dependencies {
        implementation dependentProjects

        implementation ':isorelax'
    }

    sourceSets.main.java.exclude '**/JingTask.java'
}

project(':jing-trang:schematron') {
    dependentProjects = [project(':jing-trang:util'),
                         project(':jing-trang:validate'),
                         project(':jing-trang:rng-validate')]

    dependencies {
        implementation dependentProjects

        implementation "net.sourceforge.saxon:saxon:${dependencyVersions.saxon}"
    }

    task 'compileResource' {
        def resPackage = 'com/thaiopensource/validate/schematron/resources'
        def resDir = "${sourceSets.main.output.resourcesDir}/${resPackage}"

        file(resDir).mkdirs()

        // Load xslt
        def xslt = file('lib/xsltc-fixup.xsl').newInputStream()

        // Create transformer
        def transformer = TransformerFactory.newInstance().newTransformer(new StreamSource(xslt))

        // Load schematron.xsl
        def xsl = files(sourceSets.main.java.srcDirs).asFileTree.find { it.name == 'schematron.xsl' }.newInputStream()

        // Set output file
        def outXsl = file("${resDir}/schematron-xsltc.xsl").newOutputStream()

        // Perform transformation
        transformer.transform(new StreamSource(xsl), new StreamResult(outXsl))
    }

    tasks.withType(JavaCompile) {
        dependsOn 'compileResource'
    }
}

project(':jing-trang:util')

project(':jing-trang:validate') {
    dependentProjects = [project(':jing-trang:util'),
                         project(':jing-trang:datatype')]

    dependencies {
        implementation dependentProjects

        implementation ':isorelax'
    }
}

project(':jing-trang:xsd-datatype') {
    dependentProjects = [project(':jing-trang:util'),
                         project(':jing-trang:datatype'),
                         project(':jing-trang:regex')]

    dependencies {
        implementation dependentProjects
    }
}
